# Generated by Django 4.0.4 on 2022-07-01 12:10

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('user', models.OneToOneField(db_column='User ID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'Administrator',
                'unique_together': {('id', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('registration', models.CharField(db_column='Registration', max_length=8, unique=True, verbose_name='Registration')),
                ('foreign', models.BooleanField(db_column='Is Foreign', unique=True, verbose_name='Is Foreign')),
                ('brand', models.CharField(db_column='Brand', max_length=20, unique=True, verbose_name='Brand')),
                ('model', models.CharField(db_column='Model', max_length=20, unique=True, verbose_name='Model')),
                ('created', models.DateTimeField(db_column='Created', default=django.utils.timezone.now, verbose_name='Created')),
                ('updated', models.DateTimeField(db_column='Updated', default=django.utils.timezone.now, verbose_name='Updated')),
            ],
            options={
                'db_table': 'Car',
            },
        ),
        migrations.CreateModel(
            name='Contrato',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('datavalidade', models.DateField(db_column='DataValidade')),
                ('valorcontrato', models.FloatField(db_column='ValorContrato')),
                ('datainicio', models.DateField(db_column='DataInicio')),
                ('matricula', models.CharField(db_column='Matricula', max_length=8)),
                ('criadoem', models.DateTimeField(db_column='CriadoEm')),
                ('editadoem', models.DateTimeField(db_column='EditadoEm')),
            ],
            options={
                'db_table': 'Contrato',
            },
        ),
        migrations.CreateModel(
            name='DatePeriod',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('start_date', models.DateField(db_column='Start', verbose_name='Start')),
                ('end_date', models.DateField(db_column='End', verbose_name='End')),
            ],
            options={
                'db_table': 'DatePeriod',
            },
        ),
        migrations.CreateModel(
            name='EntradasSaidas',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'Entradas/Saidas',
            },
        ),
        migrations.CreateModel(
            name='Estadocontrato',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('nome', models.CharField(db_column='Nome', max_length=50, unique=True)),
            ],
            options={
                'db_table': 'EstadoContrato',
            },
        ),
        migrations.CreateModel(
            name='Estadoreserva',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('nome', models.CharField(db_column='Nome', max_length=15, unique=True)),
            ],
            options={
                'db_table': 'EstadoReserva',
            },
        ),
        migrations.CreateModel(
            name='LayoutLine',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('x', models.IntegerField(db_column='Abscissa', verbose_name='Abscissa')),
                ('y', models.IntegerField(db_column='Ordiante', verbose_name='Ordiante')),
                ('w', models.IntegerField(db_column='Width', verbose_name='Width')),
                ('h', models.IntegerField(db_column='Height', verbose_name='Height')),
            ],
            options={
                'db_table': 'LayoutLine',
            },
        ),
        migrations.CreateModel(
            name='Modalidadepagamento',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('nome', models.CharField(db_column='Nome', max_length=15, unique=True)),
            ],
            options={
                'db_table': 'ModalidadePagamento',
            },
        ),
        migrations.CreateModel(
            name='Park',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50, unique=True, verbose_name='Name')),
                ('address', models.CharField(db_column='Address', max_length=50, unique=True, verbose_name='Address')),
                ('postal_code', models.CharField(db_column='PostalCode', max_length=8, unique=True, verbose_name='Postal Code')),
                ('typology', models.CharField(choices=[('ST', 'Structure'), ('SF', 'Surface')], db_column='Typology', max_length=2, verbose_name='Typology')),
                ('map_html', models.TextField(db_column='MapLocationHTML', verbose_name='Map Location HTML')),
                ('is_open', models.BooleanField(db_column='IsOpen', default=False, verbose_name='IsOpen')),
                ('created', models.DateTimeField(db_column='Created', default=django.utils.timezone.now, verbose_name='Created')),
                ('updated', models.DateTimeField(db_column='Updated', default=django.utils.timezone.now, verbose_name='Updated')),
                ('admin', models.ForeignKey(blank=True, db_column='Admin', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.administrator', verbose_name='Admin')),
            ],
            options={
                'db_table': 'Park',
            },
        ),
        migrations.CreateModel(
            name='ParkingSpot',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('number', models.IntegerField(db_column='NumberID', verbose_name='Number')),
                ('x', models.IntegerField(db_column='Abscissa', verbose_name='Abscissa')),
                ('y', models.IntegerField(db_column='Ordiante', verbose_name='Ordiante')),
                ('direction', models.CharField(choices=[('OC', 'Occupied'), ('RE', 'Reserved'), ('FR', 'Free')], db_column='Direction', max_length=2, verbose_name='Direction')),
            ],
            options={
                'db_table': 'ParkingSpot',
            },
        ),
        migrations.CreateModel(
            name='Periocidade',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('start', models.DateTimeField(db_column='Start')),
                ('end', models.DateTimeField(blank=True, db_column='End', null=True)),
            ],
            options={
                'db_table': 'Periocidade',
            },
        ),
        migrations.CreateModel(
            name='TimePeriod',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('start', models.TimeField(blank=True, db_column='Start', null=True, verbose_name='Start')),
                ('end', models.TimeField(blank=True, db_column='End', null=True, verbose_name='End')),
            ],
            options={
                'db_table': 'TimePeriod',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50, unique=True, verbose_name='Name')),
                ('park', models.ForeignKey(db_column='ParqueID', on_delete=django.db.models.deletion.CASCADE, to='main.park', verbose_name='Park')),
            ],
            options={
                'db_table': 'Zone',
            },
        ),
        migrations.CreateModel(
            name='WeekSchedule',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('arquived', models.BooleanField(db_column='Arquived', default=False, verbose_name='Arquived')),
                ('deadline', models.OneToOneField(db_column='Deadline', on_delete=django.db.models.deletion.CASCADE, to='main.dateperiod', verbose_name='Deadline')),
                ('friday', models.OneToOneField(db_column='Friday', on_delete=django.db.models.deletion.CASCADE, related_name='Friday', to='main.timeperiod', verbose_name='Friday')),
                ('monday', models.OneToOneField(db_column='Monday', on_delete=django.db.models.deletion.CASCADE, related_name='Monday', to='main.timeperiod', verbose_name='Monday')),
                ('park', models.ForeignKey(db_column='Parque', on_delete=django.db.models.deletion.CASCADE, to='main.park', verbose_name='Park')),
                ('saturday', models.OneToOneField(db_column='Saturday', on_delete=django.db.models.deletion.CASCADE, related_name='Saturday', to='main.timeperiod', verbose_name='Saturday')),
                ('sunday', models.OneToOneField(db_column='Sunday', on_delete=django.db.models.deletion.CASCADE, related_name='Sunday', to='main.timeperiod', verbose_name='Sunday')),
                ('thursday', models.OneToOneField(db_column='Thursday', on_delete=django.db.models.deletion.CASCADE, related_name='Thursday', to='main.timeperiod', verbose_name='Thursday')),
                ('tuesday', models.OneToOneField(db_column='Tuesday', on_delete=django.db.models.deletion.CASCADE, related_name='Tuesday', to='main.timeperiod', verbose_name='Tuesday')),
                ('wednesday', models.OneToOneField(db_column='Wednesday', on_delete=django.db.models.deletion.CASCADE, related_name='Wednesday', to='main.timeperiod', verbose_name='Wednesday')),
            ],
            options={
                'db_table': 'WeekSchedule',
            },
        ),
        migrations.CreateModel(
            name='RoleRequest',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('AD', 'Administrator'), ('EM', 'Employee')], db_column='Role', max_length=2, verbose_name='Role')),
                ('is_accepted', models.BooleanField(db_column='IsAccepted', default=False, verbose_name='Is Accepted')),
                ('is_reviewed', models.BooleanField(db_column='IsReviewed', default=False, verbose_name='Is Reviewed')),
                ('is_erased', models.BooleanField(db_column='IsErased', default=False, verbose_name='Is Erased')),
                ('created', models.DateTimeField(db_column='Created', default=django.utils.timezone.now, verbose_name='Created')),
                ('updated', models.DateTimeField(db_column='Updated', default=django.utils.timezone.now, verbose_name='Updated')),
                ('user', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'RoleRequest',
            },
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('divida', models.FloatField(blank=True, db_column='Divida', null=True)),
                ('preco', models.FloatField(blank=True, db_column='Preco', null=True)),
                ('criadoem', models.DateTimeField(db_column='CriadoEm', default=django.utils.timezone.now)),
                ('editadoem', models.DateTimeField(db_column='EditadoEm', default=django.utils.timezone.now)),
                ('contratoid', models.ForeignKey(blank=True, db_column='ContratoID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.contrato')),
                ('entradassaidasid', models.ForeignKey(blank=True, db_column='entradassaidasID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.entradassaidas')),
                ('estadoreservaid', models.ForeignKey(db_column='EstadoReservaID', on_delete=django.db.models.deletion.CASCADE, to='main.estadoreserva')),
                ('lugarid', models.ForeignKey(db_column='LugarID', on_delete=django.db.models.deletion.CASCADE, to='main.parkingspot')),
                ('matricula', models.ForeignKey(db_column='matricula', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.car')),
                ('parqueid', models.ForeignKey(db_column='ParqueID', on_delete=django.db.models.deletion.CASCADE, to='main.park')),
                ('periocidadeid', models.ForeignKey(blank=True, db_column='PeriocidadeID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.periocidade')),
                ('userid', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Reserva',
            },
        ),
        migrations.CreateModel(
            name='Reclamacao',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('nome', models.CharField(db_column='Nome', max_length=100)),
                ('email', models.EmailField(db_column='Email', max_length=50)),
                ('telefone', models.IntegerField(db_column='Telefone')),
                ('descricao', models.CharField(db_column='Descrição', max_length=30)),
                ('contratoid', models.ForeignKey(blank=True, db_column='ContratoID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.contrato')),
            ],
            options={
                'db_table': 'Reclamacao',
            },
        ),
        migrations.AddField(
            model_name='parkingspot',
            name='zone',
            field=models.ForeignKey(db_column='Zone', on_delete=django.db.models.deletion.CASCADE, to='main.zone', verbose_name='Zone'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=30, verbose_name='Title')),
                ('seen', models.BooleanField(db_column='MessageSeen', default=False, verbose_name='Message Seen')),
                ('description', models.TextField(db_column='Description', verbose_name='Description')),
                ('type', models.CharField(choices=[('NO', 'Normal'), ('RO', 'Role Request')], db_column='Type', default='NO', max_length=2, verbose_name='Type')),
                ('user', models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'Notification',
            },
        ),
        migrations.CreateModel(
            name='FacturaRecibo',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('multa', models.TextField(blank=True, db_column='Multa', null=True)),
                ('precores', models.FloatField(db_column='PrecoRes')),
                ('emitidaem', models.DateTimeField(db_column='EmitidaEm')),
                ('contribuinte', models.TextField(db_column='Contribuinte', null=True)),
                ('comprovativopagamento', models.FileField(db_column='Comprovativo', upload_to='')),
                ('contratoid', models.ForeignKey(blank=True, db_column='ContratoID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.contrato')),
                ('entradasaidaid', models.ForeignKey(blank=True, db_column='EntradaSaidaID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.entradassaidas')),
                ('estadofaturaid', models.ForeignKey(db_column='EstadoFaturaID', on_delete=django.db.models.deletion.CASCADE, to='main.estadocontrato')),
                ('periocidadeid', models.ForeignKey(db_column='PeriocidadeID', on_delete=django.db.models.deletion.CASCADE, to='main.periocidade')),
                ('reservaid', models.ForeignKey(blank=True, db_column='ReservaID', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.reserva')),
            ],
            options={
                'db_table': 'Factura/Recibo',
            },
        ),
        migrations.AddField(
            model_name='entradassaidas',
            name='lugarid',
            field=models.ForeignKey(db_column='LugarID', on_delete=django.db.models.deletion.CASCADE, to='main.parkingspot'),
        ),
        migrations.AddField(
            model_name='entradassaidas',
            name='matriculaviatura',
            field=models.ForeignKey(db_column='MatriculaViatura', on_delete=django.db.models.deletion.CASCADE, to='main.car'),
        ),
        migrations.AddField(
            model_name='entradassaidas',
            name='periocidadeid',
            field=models.ForeignKey(db_column='PeriocidadeID', on_delete=django.db.models.deletion.CASCADE, to='main.periocidade'),
        ),
        migrations.AddField(
            model_name='contrato',
            name='modalidadepagamentoid',
            field=models.ForeignKey(db_column='ModalidadePagamentoID', on_delete=django.db.models.deletion.CASCADE, to='main.modalidadepagamento'),
        ),
        migrations.AddField(
            model_name='contrato',
            name='parqueid',
            field=models.ForeignKey(db_column='ParqueID', on_delete=django.db.models.deletion.CASCADE, to='main.park'),
        ),
        migrations.AddField(
            model_name='contrato',
            name='userid',
            field=models.ForeignKey(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contrato',
            name='zonaid',
            field=models.ForeignKey(db_column='ZonaID', on_delete=django.db.models.deletion.CASCADE, to='main.zone'),
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('nif', models.IntegerField(db_column='NIF', null=True, verbose_name='NIF')),
                ('user', models.OneToOneField(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'Client',
                'unique_together': {('id', 'user')},
            },
        ),
        migrations.AddField(
            model_name='car',
            name='client',
            field=models.ForeignKey(db_column='ClientID', on_delete=django.db.models.deletion.CASCADE, to='main.client', verbose_name='Client'),
        ),
        migrations.CreateModel(
            name='PriceType',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('minutes', models.IntegerField(db_column='MinutesTime', default=0, verbose_name='Minutes Time')),
                ('hours', models.IntegerField(db_column='HoursTime', default=0, verbose_name='Hours Time')),
                ('total', models.DecimalField(db_column='TotalValue', decimal_places=2, default=0, max_digits=6, verbose_name='Total Value')),
                ('deadline', models.OneToOneField(db_column='Deadline', on_delete=django.db.models.deletion.CASCADE, to='main.dateperiod', verbose_name='Deadline')),
                ('park', models.ForeignKey(db_column='Parque', on_delete=django.db.models.deletion.CASCADE, to='main.park', verbose_name='Park')),
            ],
            options={
                'db_table': 'PriceType',
                'unique_together': {('minutes', 'hours', 'park')},
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('user', models.OneToOneField(db_column='UserID', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'Employee',
                'unique_together': {('id', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ContractType',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='Name', max_length=50, unique=True, verbose_name='Name')),
                ('years', models.IntegerField(db_column='YearsTime', default=0, verbose_name='Years Time')),
                ('months', models.IntegerField(db_column='MonthsTime', default=0, verbose_name='Months Time')),
                ('total', models.DecimalField(db_column='TotalValue', decimal_places=2, default=0, max_digits=6, verbose_name='Total Value')),
                ('park', models.ForeignKey(db_column='Parque', on_delete=django.db.models.deletion.CASCADE, to='main.park', verbose_name='Park')),
            ],
            options={
                'db_table': 'ContractType',
                'unique_together': {('name', 'park')},
            },
        ),
    ]
